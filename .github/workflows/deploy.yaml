name: Deploy

permissions:
  pull-requests: write
  issues: write
  contents: write
  actions: write
  deployments: write
  packages: write

on:
  workflow_call:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        default: "staging"
        type: string
      github-environment:
        description: "The GitHub environment to deploy to"
        required: true
        default: "staging"
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        default: "staging"
        type: string
      github-environment:
        description: "The GitHub environment to deploy to"
        required: true
        default: "staging"
        type: string
      report-pr:
        description: "The pull request number to report deployment status"
        required: false
        type: number

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment }}-${{ inputs.github-environment }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.github-environment }}
    steps:
      # - name: Avoid deploying to production for non production environments
      #   if: ${{ inputs.environment == 'production' }} && ${{ inputs.github-environment != 'production' }}
      #   run: |
      #     echo "::error::Cannot deploy to production using a non production environment."
      #     exit 1
      - name: Init login into deploy server
        run: |
          echo "Logging into deploy server..."
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER }} >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_SSH_KEY }}" | tr -d '\r' | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Update Pull Request (Start)
        uses: actions/github-script@v7
        if: inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### ⏳ Deployment in progress...

            [You can monitor the progress here.](https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })

      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: Cache npm dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build App
        run: npm run build
        env:
          FLAGSMITH_KEY: ${{ secrets.FLAGSMITH_KEY }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ vars.MY_ORG }}/gh-play10:latest
            ghcr.io/${{ vars.MY_ORG }}/gh-play10:1.0.0
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            FLAGSMITH_KEY=${{ secrets.FLAGSMITH_KEY }}
      - name: Get ENV CNAME
        id: get-env-cname
        run: echo "env_cname=${{ inputs.environment}}.${{ vars.DOMAIN }}" >> $GITHUB_OUTPUT
      - name: Create .env file
        run: |
          echo "Generating .env file"
          echo "# Autogenerated .env file" > .env
          echo "HOST_DOMAIN=${{ steps.get-env-cname.outputs.env_cname }}" >> .env
          echo "MY_ORG=${{ vars.MY_ORG }}" >> .env
          echo "PORT=$((50000 + ${{ inputs.report-pr }}))" >> .env
      - name: Deploy to server
        run: |
          echo "Deploying to server..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SERVER }} "mkdir -p deployments/gh-play10/${{ inputs.environment }}"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no  .env docker-compose.prod.yaml docker-compose.yaml ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SERVER }}:deployments/gh-play10/${{ inputs.environment }}
      - name: Start container using docker compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SERVER }} "cd deployments/gh-play10/${{ inputs.environment }} && docker compose down && docker compose -f docker-compose.yaml up -d --remove-orphans"
      - name: Notify deployment success
        run: |
          echo "Deployment to ${{ inputs.environment }} environment successful!"
          echo "Environment: ${{ inputs.environment }}"
          echo "GitHub Environment: ${{ inputs.github-environment }}"
          echo "Deployed to server: ${{ secrets.DEPLOY_SERVER }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Deployment time: $(date)"
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Deployment to ${{ inputs.environment }} environment failed!"
          echo "Environment: ${{ inputs.environment }}"
          echo "GitHub Environment: ${{ inputs.github-environment }}"
          echo "Deployed to server: ${{ secrets.DEPLOY_SERVER }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Deployment time: $(date)"
          exit 1
      - name: Clean up
        run: |
          echo "Cleaning up..."
          rm -rf ~/.ssh/id_rsa
          echo "Clean up complete."
        if: always()
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.22.0
        with:
          payload: |
            {
            "blocks": [
                {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "🛑  *<https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}|${{ github.workflow }} workflow run>* failed."
                }
              }
            ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Update Pull Request (Success)
        uses: actions/github-script@v7
        if: success() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🚀 Deployment Completed.

            You can view the deployed environment here: http://${{ steps.get-env-cname.outputs.env_cname }}`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })
      - name: Update Pull Request (Failure)
        uses: actions/github-script@v7
        if: failure() && inputs.report-pr
        continue-on-error: true
        with:
          script: |
            const comment = `### 🛑 Deployment Failed.

            [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.report-pr }},
              body: comment
            })
